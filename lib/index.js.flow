// @flow
import regeneratorRuntime from 'regenerator-runtime'

class MySuper {
  property: number
  timesTwo() {
    return this.property * 2
  }
}

export class MySub extends MySuper {
  property: number
  constructor(value: number) {
    super()
    this.property = value
  }
  plusHundred() {
    return this.property + 100
  }
}

const asyncfn = async (): Promise<string> => {
  return 'asyncfn'
}

type Which = 'prefix' | 'suffix'
type Result = Promise<string | void>
export const myfn1 = async (value: string, which: Which): Result => {
  if (!value || typeof value !== 'string') {
    throw new Error(`value must be "string"`)
  }

  const asyncstr = await asyncfn()
  if (which === 'prefix') {
    return `myfn1_${asyncstr}_${value}`
  } else if (which === 'suffix') {
    return `${value}_${asyncstr}_myfn1`
  } else {
    return
  }
}

export const myfn2: typeof myfn1 = async (value, which) => {
  if (!value || typeof value !== 'string') {
    throw new Error(`value must be "string"`)
  }

  const asyncstr = await asyncfn()
  if (which === 'prefix') {
    return `myfn2_${asyncstr}_${value}`
  } else if (which === 'suffix') {
    return `${value}_${asyncstr}_myfn2`
  } else {
    return
  }
}

// // type MyMethod = <T> () => T;
// interface MySuperInterface {
//     negative(): void
// };
// class MySuperClass implements MySuperInterface {
//     character: string;
//     negative(){
//         console.log(this.character);
//         return undefined;
//     }
// };
//
// // interface MySubInterface {
// //     // who: string,
// //     constructor(who: string): void,
// //     positive(): void
// // }
// class MySubClass extends MySuperClass {
//     character: string;
//     constructor(character){
//         super();
//         this.character = character;
//     }
//     positive(){
//
//     }
// };
//
// type Characters = "akira" | "kaneda" | "kaori";
// const charactersMap: {[name: Characters]: MySubClass} = {
//     akira: new MySubClass("akira"),
//     kaneda: new MySubClass("kaneda"),
//     kaori: new MySubClass("kaori"),
//     // kei: new MySubClass("kei")
// };
// type MyFnSecondArg = {
//
// };
// type MyFn = (name: Characters, options: MyFnSecondArg) => string | void;
//
// const myfn: MyFn = (name,options) => {
//     const value = charactersMap[name];
//     if(!value){
//         throw new Error(`no`);
//     }else{
//
//     }
// }
//
// export default async () => {
//
// }

// import regeneratorRuntime from 'regenerator-runtime'
//
// // export default (name: string, hoge?: boolean, options): void => {
// //   // let result = await prms(num)
// //   // return result;
// //   // return;
// // }
// //
//
// const passedCallback = (cb): void => {}
//
// // export default async (num: ?number) => {
// //   let result = await prms(num)
// //   return result
// // }
//
// const prms = (num: ?number) =>
//   Promise.resolve().then(() => {
//     if (typeof num !== 'number') {
//       let any = String(num)
//       throw new Error(`${any} is not number`)
//     } else {
//       return num * 100
//     }
//   })

// export default options => {}
//
// ;(() => {
//   const whatCount = post => {
//     const span = post.querySelector('.note_link_current'),
//       { count } = span.dataset
//     console.log(count)
//     return Number(count)
//   }
//
//   const posts = Array.from(document.querySelectorAll('.post'))
//     .filter(({ nodeName }) => nodeName === 'ARTICLE')
//     .sort((a, b) => {
//       const countA = whatCount(a),
//         countB = whatCount(b)
//
//       return countA > countB ? -1 : countA < countB ? 1 : 0
//     })
//
//   const mostPopularOne = posts[0]
//   console.log(JSON.parse(mostPopularOne.dataset.json))
// })()
//
// type TestFnArg = {
//   first: string,
//   second: number
// }
//
// type TestFn = (arg: TestFnArg) => number | 'fuck'
//
// const fn: TestFn = arg => {
//   const { first, second } = arg,
//     firstNum = Number(first)
//   if (isNaN(firstNum)) {
//     return 'fuck'
//   } else {
//     return firstNum + second
//   }
// }

// import puppeteer from "puppeteer"
// // うーん、思いつかない。どうゆうコードを書いたらいいのか。
// // 動機がないんだよな。「何をさせたい」が無い。
// // まー、「documentとしてのcode」にしたいというか、
// // ここを見たらFlowの挙動をすぐに思い出せるようなコードにしたい
// // だからtypeofとか&とかGenericとか
// var k = 5;
//
// interface MyInterface {
//     method(value: number): string
// }
